{"version":3,"sources":["scripts/main.js"],"names":["board","gameScore","document","querySelector","highScore","startBtn","restartBtn","winMessage","loseMessage","startMessage","isGameHas2048","score","rows","columns","cell","querySelectorAll","scoreFromLocalStorage","localStorage","getItem","window","onload","textContent","addEventListener","setGame","classList","add","remove","setItem","r","c","num","cellElement","updateCell","setTwoOrFour","value","toString","e","code","slideLeft","slideRigth","slideUp","slideDown","filterZero","rowArr","filter","slide","newArr","i","length","push","isChange","row","newRow","isArrayEqual","originalArr","rowReverse","reverse","newRowReverse","slice","originalRow","arr1","arr2","randomTile","Math","random","isEmptyTile","checkHorizontalGameOver","checkVerticalGameOver","isGameOver","found","floor","cellIndex"],"mappings":"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","file":"main.9a162eb5.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// UI\nconst gameScore = document.querySelector('.game-score');\nconst highScore = document.querySelector('.high-score');\n\n// Button\nconst startBtn = document.querySelector('.start');\nconst restartBtn = document.querySelector('.restart');\n\n// Message\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\n\n// Game fields\nlet isGameHas2048 = false;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst cell = [...document.querySelectorAll('.field-cell')];\nlet board;\nconst scoreFromLocalStorage = localStorage.getItem('highScore');\n\n// Game logic\nwindow.onload = () => {\n  if (scoreFromLocalStorage) {\n    highScore.textContent = scoreFromLocalStorage;\n  } else {\n    highScore.textContent = 0;\n  }\n};\n\nstartBtn.addEventListener('click', () => {\n  setGame();\n\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  restartBtn.classList.remove('hidden');\n  startBtn.classList.add('hidden');\n});\n\nrestartBtn.addEventListener('click', () => {\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  if (score > scoreFromLocalStorage) {\n    highScore.textContent = score;\n    localStorage.setItem('highScore', score);\n  }\n\n  score = 0;\n  gameScore.textContent = score;\n  setGame();\n});\n\nconst setGame = () => {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  setTwoOrFour();\n  setTwoOrFour();\n};\n\nconst updateCell = (cellElement, num) => {\n  cellElement.textContent = '';\n  cellElement.classList.value = '';\n  cellElement.classList.add('field-cell');\n\n  if (num > 0) {\n    cellElement.textContent = num.toString();\n\n    if (num < 2048) {\n      cellElement.classList.add(`field-cell--${num.toString()}`);\n    }\n  }\n\n  if (num === 2048) {\n    isGameHas2048 = true;\n    winMessage.classList.remove('hidden');\n  }\n};\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'ArrowLeft') {\n    if (slideLeft()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowRight') {\n    if (slideRigth()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowUp') {\n    if (slideUp()) {\n      setTwoOrFour();\n    }\n  } else if (e.code === 'ArrowDown') {\n    if (slideDown()) {\n      setTwoOrFour();\n    }\n  }\n});\n\nconst filterZero = (rowArr) => {\n  return rowArr.filter(num => num !== 0);\n};\n\nconst slide = (rowArr) => {\n  let newArr = filterZero(rowArr);\n\n  for (let i = 0; i < newArr.length - 1; i++) {\n    if (newArr[i] === newArr[i + 1]) {\n      newArr[i] *= 2;\n      newArr[i + 1] = 0;\n      score += newArr[i];\n      gameScore.textContent = score;\n    }\n  }\n\n  newArr = filterZero(newArr);\n\n  while (newArr.length < 4) {\n    newArr.push(0);\n  }\n\n  return newArr;\n};\n\nconst slideLeft = () => {\n  let isChange = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide(row);\n\n    if (!isArrayEqual(row, newRow)) {\n      isChange = true;\n    }\n    board[r] = newRow;\n\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideRigth = () => {\n  let isChange = false;\n\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n    const originalArr = [...row];\n\n    const rowReverse = row.reverse();\n    const newRow = slide(rowReverse);\n    const newRowReverse = newRow.slice().reverse();\n\n    if (!isArrayEqual(originalArr, newRowReverse)) {\n      isChange = true;\n    }\n\n    board[r] = newRowReverse;\n\n    for (let c = 0; c < columns; c++) {\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideUp = () => {\n  let isChange = false;\n\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide(row);\n\n    if (!isArrayEqual(row, newRow)) {\n      isChange = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newRow[r];\n\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst slideDown = () => {\n  let isChange = false;\n\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    const rowReverse = row.reverse();\n    const newRow = slide(rowReverse);\n    const newRowReverse = newRow.slice().reverse();\n\n    if (!isArrayEqual(originalRow, newRowReverse)) {\n      isChange = true;\n    }\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newRowReverse[r];\n\n      const num = board[r][c];\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, num);\n    }\n  }\n\n  return isChange;\n};\n\nconst isArrayEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst randomTile = () => Math.random() > 0.9 ? 4 : 2;\n\nconst isEmptyTile = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkHorizontalGameOver = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst checkVerticalGameOver = () => {\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst isGameOver = () => {\n  if (isEmptyTile()) {\n    return false;\n  }\n\n  return checkHorizontalGameOver() && checkVerticalGameOver();\n};\n\nconst setTwoOrFour = () => {\n  if (!isEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found && !isGameHas2048) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = randomTile();\n\n      const cellIndex = r * columns + c;\n      const cellElement = cell[cellIndex];\n\n      updateCell(cellElement, board[r][c]);\n      found = true;\n    }\n\n    if (board[r][c] === 2048) {\n      isGameHas2048 = true;\n    }\n\n    if (isGameOver()) {\n      loseMessage.classList.remove('hidden');\n\n      if (score > highScore.value) {\n        highScore.textContent = score;\n        localStorage.setItem('highScore', score);\n      }\n    }\n  }\n};\n"]}